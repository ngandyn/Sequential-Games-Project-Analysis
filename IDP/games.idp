
vocabulary V { 
    type n isa int 
    type r isa int 
    type c isa int
    type k isa int
    type game isa int
    type range isa int

    num : n
    cap : c
    refill : r
    K : k
    
    fun(game) : range
    p(game) : range
    t(game) :range
    totalFun : range

} 


//structure S : V {
//   num = 5
//    cap =3
//    refill=2
//    K = 25
//    game = {1..5} 
//    fun = {
//        1-> 4;
//       2-> 1;
//        3-> -2;
//        4-> 3;
//        5-> 4;
//    }
//    range = {-100..100}  
//}



theory T : V { 
    //constraint 1
    K =< sum{g: game(g) : p(g)*fun(g)}.

    
    // constraint 2
    t(1) = cap & !i:(((1< i) & (game(i)))=> (?x:(x =t(i-1) - p(i-1) + refill) 
    						& (x > cap =>t(i) = cap) 
    						& (x =< cap => t(i) = x)
    				)
    		).
    
    //constraint 3
    !i:( 1 =< i & game(i)) => ((1 =< p(i)) & (p(i) =< t(i))).
    

   
}

term Obj : V {
    sum{g: game(g) : p(g)*fun(g)}
} 




procedure main(){ 
    local sol,x,max = maximize(T,S,Obj)
    print("total_fun("..-max..").") 
}
 